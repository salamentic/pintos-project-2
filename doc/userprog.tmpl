		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Aniruddh Rao <anrao3@buffalo.edu>
Aaron Wilson <wilsonaar@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

char**argv - To store the arguments temporarily and ordered before placing them on the stack. One page of memory is allocated.
int argc - The number of arguments in argv
static void setup_stack(void *esp, const char ** argv, int argc) - Made it so that we push the arguments using the stack pointer provided. The stack is setup as specified in the project description
tid_t process_execute(const char * filename) - Made it so that we process the filename to execute the program in the first argument.
bool load (const char *file_name, void (**eip) (void), void **esp)- This gets a copy of the filename, and tokenizes it , using strtok_r . This is stored in argv. 
char*fn_copy2 - The variable used to store the copy of a filename. Used to tokenize the string to get the first argument for process_execute().
int process_wait(tid_t child_tid UNUSED) - Changed it so that we waited 5 seconds for now, till wait gets implemented.
---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Firstly we tokenize the string and store the arguments in an array. This helps maintain order when we are pushing the arguments onto the stack later.
Then, in setup_stack(), we first start at the stack pointer passed into the function. Further, we modify this function's prototype so that it can take in char**argv and int argc.
After we give the stack the memory required ( a page ), we start pushing arguments.
We copy the strings in argv onto the stack, while allocating as much space required on the stack. We then push as many 0-valued bits are required for word alignment.
Then we push a null char pointer to satisfy C standards for arguments. Then we push the pointers to the arguments already on the stack in reverse order. We do so by storing the pointer to the last argument before the word alignment step.
Then we push the pointer to the first argument pointer. Then we push the number of total arguments ( argc ) onto the stack.
Finally, we push null onto the stack as a fake return address.
Ideally, an overflow of the stack page should not occur, based on the standards for argument passing in PintOS, but in case it does, we allocate another page and continue pushing on the a rguments.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() uses a global/static variable for storing its status, so you can't use them in multiple threads. Since this is a possibility in PintOS, strtok() is not implemented.
strtok_r(), on the other hand, allows you to provide a pointer where you can store the status of the tokenizing process. This allows PintOS to safely tokenize the string while still having multiple threads.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

- The Unix approach reduces the workload on the kernel Therefore, it also reduces the exchange of data between the kernel space and user space.
- The Unix approach reduces the chances of invalid arguments being passed to the kernel, since the shell can verify them before passing them on to the kernel. 

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

tid_t process_wait() - We modify this function so that we can implement the process to wait for a child process using synchronization.
void* safe_acc(void*address) - Checks for safe access of memory. Checks if the pointer being accessed by the system call is null, or is poining to ummapped user memory, or is not in te user address space.
                               If any of these cases are fullfill, the process is terminated.
void syscall_handler(struct intr_frame f) - This is what checks the stack for the syscall nnumber, and executed the rrequired syscalls. We might change the execution of the different syscalls to different functions, but for now everything happens in this handler.
void process_exit() - We modified this so that it prints an exit message as required by P2 standards.

struct thread - Added multiple members for functionality required (shown below):
struct semaphore filesys - This semaphore is initialized to 1, and is used so that only one process can modify the file system at a time. 
struct list files - This list is present for every executing thread, and holds a file descriptor structure for every file open by this process/thread.
struct list children - This list is used to hold children of the given process/thread.
struct thread * parent - This list is used to hold the address of the thread that is the parent of the current process.
int max_fd - This is the max number of file descriptors currently used by the thread. This allows for unique file descriptors for different files open.
int exit_status - This holds the exit status for the current process. 
int wait_status - This holds the status of wait after a wait has been called. This will probably not be used later on since it is not optimal
for dealing with race conditions syscall wait.

struct file_descriptor - This struct holds a pointer to a file, and an int which signifies the file descriptor.



>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are numbers that are associated to an open file that is unique to the process.
These allow the process to modify, open, or read from its own copy of the file.
Each file descriptor is unique to the process, and whenever you open a file, the process has its own position in the file for every file it opens with a desciptor.
These descriptors are not inherited by the children of the process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

First we get the arguments from the systmem call stack. 
- The buffer to write from or read to
- The size to be written
- The file description
Then we check the fd number. If 1, we write to the console ( std_out ) using putbuf. The arguments will be arg[2] and arg[3] which we get from the stack.
                             If any other number, we write to the file using file_write defined in file.c, with the respective arguments.
In case of reading.          if 0 , we take input from the keyboard ( std_in ) using inputget_c, with the respective arguments from the stack.
                             If any other number, we read using file_read similarly.
			     If file write gets 0 or file read gets 1, we throw an error.
The return value depends on the file descriptor. If the operation is being done on std, we return the value in arg[3], assuming everything can be read or written.
                                                 In any other case, we return the value from the respective file_command.
Another thing to note, before these operations take place, we also down the global semaphore for file operations, and up after operations are done.
We also check for safe memory access for every pointer being passed as an argument to the system call.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

When this is the case, as per the way the file operations have been implemented, the number of inspections will be at least 1.
The max will be 2, as we will need to create a new page.
In most cases, the system call copying 2 bytes of data will be 1, the max will be 2 when the page is only one byte from being full, since another get will have to be done so that a new page can be gotten.
There is not room for improvement, we believe. Most of the commands are being run from PintOS themself, and these are quite efficient.
Using a dynamic addressing system they theoretically could be improved, but we are not required to implement this.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

When wait is called on a process, we add the process to a list in the child being waited for, which indicates the list of processes that are waiting for that child process.
We then sema_down on a semaphore that is accessible by only the process and the children of it, which is initalized to 0.
This semaphore will be upped when the child process completes execution or fails/terminates.
This semaphore will have to be stored in the structre outside of these two threads so that it will be present even when either the parent or the child dies.'
An additional step for all this must be checking if the process being waited for is indeed a child, if it isn't we fail the wait.
This also occurs if we are already waiting for a child.
When the child process terminates, it must check if any process is waiting for it, and if there is, we up the global semaphore, and then terminate.
In case of the parent terminating, nothing changes, but since the semaphore is outside of the child and parent thread, there will be no issues when the child ups the semaphore for the parent.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

The way we handle errors, is by first checking for the conditions related to the possible errors that might occur, before dereferencing or writing to memory. 
We do this using the wrapper function called safe_acc, which checks for the validity of a pointer passed to it, and terminates the process and returns NULL if the pointer is invalid.
The following function checks for the following cases:
1) NULL pointer 2) Unmapped memory 3) Non user address.

That said, whenever a file operation is called, the handler first checks if all the argument addresses are valid. Then, it checks, if the argument is a pointer,
if the pointer is valid using safe_acc again. Then finally, we verify the memory locations being worked on, if any, to see if its valid too for e.g files. After all these checks, we successfully 
know that all the error prone arguments and memory locations are safe to use, and therefore perform the required actions. In case any of these say that the pointer/memory is invalid, the process is terminated using thread_exit() (which 
frees all memory held by the process using process_exit()) and setting the exit status to -1, indicating that the process was terminated because of an error.
Although this poses for multiple calls to safe_acc, we feel this strategy allows for the safest use of memory   in the simplest possible way. The other method would be to make use of page faults alone
after some modifications, but that poses more communication overhead in my opinion.

Finally, an example of this would be a call to syscall write. 
First we check if the syscall number location on the stack is valid, and then check if the syscall number is the same as SYS_WRITE.
Then, since it is we check the validity of the first three argument positions on the stack, since the syscall uses arguments for fd, buffer and size.
Then the next step is to check if all the pointers are valid, in this case that being buffer. Then finally, we check if the memory of the file related to fd is user mapped, and if it is, we finally write to the file.
Now say, the buffer was a bad pointer. Then before the write can be done, the syscall handler would check if it is invalid and terminate the process when it sees that the pointer for buffer is a bad one (safe_acc does this).
This successfully frees all memory held by the process and allows other syscalls to be made without crashing pintos.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Whenever exec is called, we assign a variable pid to the exec function, which should return the pid of the process being executed once loaded, and -1 if it does not load.
Once an assignment is done, the next line will be a sema_down on a global semaphore, which is initalized to 0. This semaphore will be upped  only when the execution of the child process either fails or succeeds,
Therefore, the parent process will have to wait for the child process to load before it can continue or return for the exec block.
We can determine the success based on the pid returned. if the pid is -1 then the exec failed. Else, it succeeded, and we return as such.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We implemented it in the way that we did because the approach we used checks for null pointers, and if they are in the user address, and then check if it unmapped, and only then dereferences the pointer.
This saves time over page faulting whenever a process is accessing non-user memory. It reduces the Inter-process communication with the other process being the page fault interrupt handler.
Further, this approach is much simpler than the approach where you need to use assembly for handling page faults. 

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

The advantadges of our design is that it is pretty straightforward, each process easily aquires a unique file descriptor.
Another advantadge would be the fact that we use a list to store file descriptors, so we can store a lot more to be stored than allocating a fixed amount of memory, since lists are memory safe, and can increase the amount of memory as required in PintOS.
Pushing is quite quick, also.
The disadvantadges are that although adding file descriptors is pretty fast, removal can be slightly slower, because you need to look through a list in O(N) time.
Further, it also might be slightly slower in a case where retrievals of the file descriptor are required. This is relevant only when too many files are opened by a specific process.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change it, since each process exeuted has an independent PID. We might change it so children processes are mapped to the same pid having a one to many mapping.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

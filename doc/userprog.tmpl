		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Aniruddh Rao <anrao3@buffalo.edu>
Aaron Wilson <wilsonaar@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

char**argv - To store the arguments temporarily and ordered before placing them on the stack. One page of memory is allocated.
int argc - The number of arguments in argv
static void setup_stack() - Made it so that we push the arguments using the stack pointer provided. The stack is setup as specified in the project description
(!) process_execute() - Made it so that we process the filename to execute the program in the first argument.
load() - Big Function. This gets a copy of the filename, and tokenizes it , using strtok_r . This is stored in argv. 
char*fn_copy2 - The variable used to store the copy of a filename. Used to tokenize the string to get the first argument for process_execute().

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Firstly we tokenize the string and store the arguments in an array. This helps maintain order when we are pushing the arguments onto the stack later.
Then, in setup_stack(), we first start at the stack pointer passed into the function. Further, we modify this function's prototype so that it can take in char**argv and int argc.
After we give the stack the memory required ( a page ), we start pushing arguments.
We copy the strings in argv onto the stack, while allocating as much space required on the stack. We then push as many 0-valued bits are required for word alignment.
Then we push a null char pointer to satisfy C standards for arguments. Then we push the pointers to the arguments already on the stack in reverse order. We do so by storing the pointer to the last argument before the word alignment step.
Then we push the pointer to the first argument pointer. Then we push the number of total arguments ( argc ) onto the stack.
Finally, we push null onto the stack as a fake return address.
Ideally, an overflow of the stack page should not occur, based on the standards for argument passing in PintOS, but in case it does, we allocate another page and continue pushing on the a rguments.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() uses a global/static variable for storing its status, so you can't use them in multiple threads. Since this is a possibility in PintOS, strtok() is not implemented.
strtok_r(), on the other hand, allows you to provide a pointer where you can store the status of the tokenizing process. This allows PintOS to safely tokenize the string while still having multiple threads.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

- The Unix approach reduces the workload on the kernel Therefore, it also reduces the exchange of data between the kernel space and user space.
- The Unix approach reduces the chances of invalid arguments being passed to the kernel, since the shell can verify them before passing them on to the kernel. 

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

void process_wait() - We modify this function so that we can implement the process to wait for a child process using synchronization.
void* safe_acc(void*address) - Checks for safe access of memory. Checks if the pointer being accessed by the system call is null, or is poining to ummapped user memory, or is not in te user address space.
                               If any of these cases are fullfill, the process is terminated.
void syscall_handler(struct intr_frame f) - This is what checks the stack for the syscall nnumber, and executed the rrequired syscalls. We might change the execution of the different syscalls to different functions, but for now everything happens in this handler.
void process_exit() - We modified this so that it prints an exit message as required by P2 standards.

struct semaphore filesys - This semaphore is initialized to 1, and is used so that only one process can modify the file system at a time. 
struct list files - This list is present for every executing thread, and holds a file descriptor structure for every file open by this process/thread.
struct file_descriptor - This struct holds a pointer to a file, and an int which signifies the file descriptor.
struct list children - This list is used to hold children of the current process.

int max_fd - This is the max number of file descriptors currently used by the thread. This allows for unique file descriptors for different files open.
int exit_status - This holds the exit status for the current process. 

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are numbers that are associated to an open file that is unique to the process.
These allow the process to modify, open, or read from its own copy of the file.
Each file descriptor is unique to the process, and whenever you open a file, the process has its own position in the file for every file it opens with a desciptor.
These descriptors are not inherited by the children of the process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
